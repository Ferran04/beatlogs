@startuml

' The Factory pattern can simplify the creation of MediaItem objects,
' especially if the system might support more media types in the future.
' Create a MediaItemFactory that takes parameters (e.g., type)
' and produces the appropriate MediaItem (Song, Album, EP, etc.).

' - Centralizes object creation, making the system more consistent.
' - Makes it easier to add new MediaItem types without modifying existing code.

class Folder {
    +name: String
}

class MediaItem {
    +id: int
    +title: String
    +type: String
}

class Song {
    +duration: int
    +artist: String
}

class SongContainer {
    +collection: List<Song>
}

class MusicRelease {
    +releaseDate: Date
}

class Album {
    ' Inherits releaseDate from MusicRelease
}

class EP {
    ' Inherits releaseDate from MusicRelease
}

class Single {
    ' Inherits releaseDate from MusicRelease
}

class Playlist {
    +description: String
}

' Define a Factory class for MediaItem creation
class MediaItemFactory {
    +createMediaItem(type: String): MediaItem
}

' Relationships
MediaItem <|-- Song
MediaItem <|-- Folder
MediaItem <|-- SongContainer
SongContainer <|-- MusicRelease
SongContainer <|-- Playlist
MusicRelease <|-- Album
MusicRelease <|-- EP
MusicRelease <|-- Single
MediaItemFactory --> MediaItem : creates >

' Adjust the relationship lines for clarity
Folder "1" -- "0..*" MediaItem : contains >
SongContainer "1" -- "1..*" Song : has >
@enduml